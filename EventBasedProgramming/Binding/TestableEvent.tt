<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Linq;
using EventBasedProgramming.Binding.Impl;
using System.Reflection;

namespace EventBasedProgramming.Binding
{
	public class TestableEventBase
	{
		protected readonly List<BindingInfo> _handlers = new List<BindingInfo>();

		protected void _BindTo(BindingInfo handler)
		{
			_handlers.Add(handler);
		}

		protected void _UnbindFrom(MethodInfo method, object target)
		{
			_handlers.RemoveAll(h => h.Method == method && h.Target == target);
		}

		protected bool _IsBoundTo(MethodInfo method, object target)
		{
			return _handlers.Any(h => h.Method == method && h.Target == target);
		}
	}

	public class TestableEvent : TestableEventBase
	{
		public void BindTo(Action handler)
		{
			_BindTo(new BindingInfo(handler.Method, handler.Target));
		}

		public void UnbindFrom(Action handler)
		{
			_UnbindFrom(handler.Method, handler.Target);
		}

		public bool IsBoundTo(Action handler)
		{
			return _IsBoundTo(handler.Method, handler.Target);
		}

		public void Call()
		{
			_handlers.Each(h => h.Call());
		}
	}
<# for(var i=1; i<17; ++i) { #>

	public class TestableEvent<<#= TypeNames(i) #>> : TestableEventBase
	{
		public void BindTo(Action<<#= TypeNames(i) #>> handler)
		{
			_BindTo(new BindingInfo(handler.Method, handler.Target));
		}

		public void UnbindFrom(Action<<#= TypeNames(i) #>> handler)
		{
			_UnbindFrom(handler.Method, handler.Target);
		}

		public bool IsBoundTo(Action<<#= TypeNames(i) #>> handler)
		{
			return _IsBoundTo(handler.Method, handler.Target);
		}

		public void Call(<#= DeclarationArguments(i) #>)
		{
			_handlers.Each(h => h.Call(<#= Arguments(i) #>));
		}
	}
<# } #>
}
<#+
private string TypeNames(int max)
{
	return Sequence("TArg{0}", max);
}

private string DeclarationArguments(int max)
{
	return Sequence("TArg{0} arg{0}", max);
}

private string Arguments(int max)
{
	return Sequence("arg{0}", max);
}

private string Sequence(string format, int max)
{
	return string.Join(", ", Enumerable.Range(1,max).Select(n=>string.Format(format, n)));
}
#>